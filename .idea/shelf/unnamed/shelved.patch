Index: app/src/main/java/np/com/dhirajsharma/coolwordclock/activity/Home.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/np/com/dhirajsharma/coolwordclock/activity/Home.java	(revision )
+++ app/src/main/java/np/com/dhirajsharma/coolwordclock/activity/Home.java	(revision )
@@ -0,0 +1,267 @@
+package np.com.dhirajsharma.coolwordclock.activity;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.Color;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.PowerManager;
+import android.support.annotation.Nullable;
+import android.support.v7.app.AppCompatActivity;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.View;
+import android.webkit.WebSettings;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.RelativeLayout;
+
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Random;
+
+import np.com.dhirajsharma.coolwordclock.R;
+import np.com.dhirajsharma.coolwordclock.util.CommonUtils;
+
+/**
+ * Created by Dhiraj on 2/17/2017.
+ */
+
+public class Home extends AppCompatActivity {
+
+    private WebView webView;
+    private int fontSize = 20;
+    private int storedFontSize;
+    private RelativeLayout container;
+    private int maxHeight;
+    private boolean increment;
+    private SharedPreferences sharedPreferences;
+    private Calendar calendar;
+    private List<Boolean> colors;
+    private Handler handler;
+    private int lastMinute = -1;
+    private Runnable r;
+    private String data = "";
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.home);
+
+        sharedPreferences = getSharedPreferences(CommonUtils.FILE_NAME, MODE_PRIVATE);
+        colors = Arrays.asList(new Boolean[CommonUtils.WORDS.size()]);
+        webView = (WebView) findViewById(R.id.webView);
+
+        container = (RelativeLayout) findViewById(R.id.container);
+        setContainerPadding();
+
+        webView.setOnLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                return true;
+            }
+        });
+        webView.getSettings().setRenderPriority(WebSettings.RenderPriority.HIGH);
+
+        webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
+        if (Build.VERSION.SDK_INT >= 19) {
+            webView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+        } else {
+            webView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
+        }
+        webView.setLongClickable(false);
+        webView.setHapticFeedbackEnabled(false);
+        webView.setBackgroundColor(Color.parseColor("#212121"));
+        webView.setWebViewClient(new WebViewClient() {
+            @Override
+            public void onPageFinished(WebView view, String url) {
+                if (!increment) {
+                    webView.setVisibility(View.VISIBLE);
+                    saveFontSize(fontSize);
+                    startCountDown();
+                    return;
+                }
+                int webViewHeight = webView.getMeasuredHeight();
+                Log.d("My Log", "Font Size Increased : Webview Height : " + webViewHeight + "  Container Max Height : " + maxHeight);
+                if (webViewHeight < maxHeight) {
+                    incrementTextSize();
+                } else {
+                    decrementTextSize();
+                }
+            }
+        });
+
+        storedFontSize = getFontSize();
+        if (storedFontSize == 0) {
+            incrementTextSize();
+        } else {
+            increment = false;
+            fontSize = storedFontSize;
+            loadDataToWebview();
+        }
+
+
+    }
+
+    private void incrementTextSize() {
+        increment = true;
+        fontSize += 1;
+        loadDataToWebview();
+    }
+
+    private void decrementTextSize() {
+        increment = false;
+        fontSize -= 1;
+        loadDataToWebview();
+    }
+
+    private void loadDataToWebview() {
+        Log.d("My Log", "Data : " + getDataToLoad());
+        webView.loadData(getDataToLoad(), "text/html", "UTF-8");
+        if (!increment) {
+            webView.reload();
+        }
+
+    }
+
+    private void setContainerPadding() {
+        DisplayMetrics metrics = new DisplayMetrics();
+        getWindowManager().getDefaultDisplay().getMetrics(metrics);
+
+        int height = metrics.heightPixels;
+        int width = metrics.widthPixels;
+
+        container.setPadding(width / 13, 0, width / 13, 0);
+        maxHeight = height / 10 * 7;
+    }
+
+    private int getFontSize() {
+        return sharedPreferences.getInt(CommonUtils.FONT_SIZE, 0);
+    }
+
+    private void saveFontSize(int fontSize) {
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putInt(CommonUtils.FONT_SIZE, fontSize);
+        editor.apply();
+    }
+
+    private String getDataToLoad() {
+        if (!increment) {
+            updateColor();
+        }
+        data = "<div style=\"text-align: justify; font-size: " + fontSize + "px; font-weight: bold;\">";
+        for (int i = 0; i < CommonUtils.WORDS.size(); i++) {
+            data += "<span style=\"color:" + getColorForWord(i) + "\">" + CommonUtils.WORDS.get(i) + "</span> ";
+        }
+        data += "</div>";
+        return data;
+    }
+
+    private void updateColor() {
+        colors.set(0, true); //IT
+        colors.set(1, true); //IS
+        colors.set(2, minuteBound(30, 34)); //HALF
+        colors.set(3, minuteBound(10, 14) || minuteBound(50, 54)); //TEN
+        colors.set(4, minuteBound(15, 19) || minuteBound(45, 49)); //QUARTER
+        colors.set(5, minuteBound(20, 29) || minuteBound(35, 44)); //TWENTY
+        colors.set(6, minuteBound(5, 9) || minuteBound(55, 59) || minuteBound(25, 29) || minuteBound(35, 39)); //FIVE
+        colors.set(7, !colors.get(2) && !colors.get(4) && !minuteBound(0, 4)); //MINUTES
+        colors.set(8, minuteBound(35, 59)); //TO
+        colors.set(9, minuteBound(5, 34)); //PAST
+
+        colors.set(22, minuteBound(0, 4)); //O'CLOCK
+
+        colors.set(10, hourBound(1)); //ONE
+        colors.set(11, hourBound(3)); //THREE
+        colors.set(12, hourBound(2)); //TWO
+        colors.set(13, hourBound(4)); //FOUR
+        colors.set(14, hourBound(5)); //FIVE
+        colors.set(15, hourBound(6)); //SIX
+        colors.set(16, hourBound(7)); //SEVEN
+        colors.set(17, hourBound(8)); //EIGHT
+        colors.set(18, hourBound(9)); //NINE
+        colors.set(19, hourBound(10)); //TEN
+        colors.set(20, hourBound(11)); //ELEVEN
+        colors.set(21, hourBound(12)); //TWELVE
+        Log.d("My Log", "Color Changed");
+
+//        for (int i = 0; i < 23; i++) {
+//            colors.set(i, getRandomBoolean());
+//        }
+
+    }
+
+    private String getColorForWord(int i) {
+        if (increment || colors.get(i) == null) {
+            return CommonUtils.OFF_COLOR;
+        } else {
+            return getColor(colors.get(i));
+        }
+
+    }
+
+    private void startCountDown() {
+
+        if (r != null) {
+            return;
+        }
+        handler = new Handler();
+
+        r = new Runnable() {
+            public void run() {
+                int currentMinute = getMinute() / 5;
+                Log.d("My Log", "HERE OUTSIDE: " + currentMinute + " : " + lastMinute);
+                if (lastMinute != currentMinute) {
+                    Log.d("My Log", "HERE INSIDE: " + currentMinute + " : " + lastMinute);
+                    lastMinute = currentMinute;
+                    loadDataToWebview();
+                    playDing();
+                }
+                handler.postDelayed(this, 10000);
+            }
+        };
+        r.run();
+    }
+
+    private boolean hourBound(int hour) {
+        return (getHour() == hour && colors.get(22)) || (getHour() == hour && colors.get(9)) || (((getHour() < 12) ? (getHour() + 1) : 1) == hour && colors.get(8));
+    }
+
+    private int getMinute() {
+        calendar = Calendar.getInstance();
+        return calendar.get(Calendar.MINUTE);
+    }
+
+    private int getHour() {
+        calendar = Calendar.getInstance();
+        return calendar.get(Calendar.HOUR);
+    }
+
+    private boolean minuteBound(int min, int max) {
+        return (getMinute() <= max && getMinute() >= min);
+    }
+
+    private String getColor(boolean on) {
+        return on ? CommonUtils.ON_COLOR : CommonUtils.OFF_COLOR;
+    }
+
+
+    private void playDing() {
+        MediaPlayer mMediaPlayer = MediaPlayer.create(this, R.raw.ding);
+        mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
+        mMediaPlayer.start();
+    }
+
+    private boolean getRandomBoolean() {
+        Random random = new Random();
+        return random.nextBoolean();
+    }
+
+    private int fontSizeCalculator(){
+        return 0;
+    }
+}
